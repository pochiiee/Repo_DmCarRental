// <auto-generated />
using System;
using CarRental.Views.CarList.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarRental.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250326152044_addedCarlist")]
    partial class addedCarlist
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarRental.Models.Entites.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<string>("Airbags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrakingSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelEfficiency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelTankCapacity")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroundClearance")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LuggageCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Seaters")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TireSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            CarId = 1,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD, Brake Assist",
                            Brand = "Toyota",
                            FuelEfficiency = "15 km/L (city), 20 km/L (highway)",
                            FuelTankCapacity = 42,
                            FuelType = "Gasoline",
                            GroundClearance = 150,
                            ImageUrl = "vios.png",
                            LuggageCapacity = 3,
                            Model = "Vios",
                            RentalPrice = 2000m,
                            Seaters = 5,
                            Status = "Available",
                            TireSize = "185/60 R15, All-Season",
                            Transmission = "CVT (Automatic)"
                        },
                        new
                        {
                            CarId = 2,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Honda",
                            FuelEfficiency = "17 km/L (combined)",
                            FuelTankCapacity = 40,
                            FuelType = "Gasoline",
                            GroundClearance = 134,
                            ImageUrl = "city.png",
                            LuggageCapacity = 3,
                            Model = "City",
                            RentalPrice = 2200m,
                            Seaters = 5,
                            Status = "Available",
                            TireSize = "185/55 R16, All-Season",
                            Transmission = "CVT"
                        },
                        new
                        {
                            CarId = 3,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Mitsubishi",
                            FuelEfficiency = "18 km/L (combined)",
                            FuelTankCapacity = 42,
                            FuelType = "Gasoline",
                            GroundClearance = 160,
                            ImageUrl = "mirage.png",
                            LuggageCapacity = 3,
                            Model = "Mirage G4",
                            RentalPrice = 2000m,
                            Seaters = 5,
                            Status = "Available",
                            TireSize = "175/55 R15, All-Season",
                            Transmission = "CVT"
                        },
                        new
                        {
                            CarId = 4,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD, Brake Assist",
                            Brand = "Nissan",
                            FuelEfficiency = "14 km/L (city), 19 km/L (highway)",
                            FuelTankCapacity = 41,
                            FuelType = "Gasoline",
                            GroundClearance = 135,
                            ImageUrl = "almera.png",
                            LuggageCapacity = 3,
                            Model = "Almera",
                            RentalPrice = 2300m,
                            Seaters = 5,
                            Status = "Available",
                            TireSize = "185/65 R15, All-Season",
                            Transmission = "Automatic"
                        },
                        new
                        {
                            CarId = 5,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Ford",
                            FuelEfficiency = "12 km/L (city), 16 km/L (highway)",
                            FuelTankCapacity = 52,
                            FuelType = "Gasoline",
                            GroundClearance = 209,
                            ImageUrl = "ecosport.png",
                            LuggageCapacity = 4,
                            Model = "EcoSport",
                            RentalPrice = 2800m,
                            Seaters = 5,
                            Status = "Available",
                            TireSize = "205/50 R17, All-Season",
                            Transmission = "Automatic"
                        },
                        new
                        {
                            CarId = 6,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Suzuki",
                            FuelEfficiency = "17 km/L (combined)",
                            FuelTankCapacity = 37,
                            FuelType = "Gasoline",
                            GroundClearance = 145,
                            ImageUrl = "dzire.png",
                            LuggageCapacity = 3,
                            Model = "Dzire",
                            RentalPrice = 2000m,
                            Seaters = 5,
                            Status = "Available",
                            TireSize = "185/65 R15, All-Season",
                            Transmission = "Auto Gear Shift (AGS)"
                        },
                        new
                        {
                            CarId = 7,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Toyota",
                            FuelEfficiency = "10 km/L (combined)",
                            FuelTankCapacity = 70,
                            FuelType = "Diesel",
                            GroundClearance = 185,
                            ImageUrl = "hiace.png",
                            LuggageCapacity = 10,
                            Model = "Hiace",
                            RentalPrice = 4500m,
                            Seaters = 15,
                            Status = "Available",
                            TireSize = "215/75 R16, All-Season",
                            Transmission = "Manual"
                        },
                        new
                        {
                            CarId = 8,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Ford",
                            FuelEfficiency = "8 km/L (city), 12 km/L (highway)",
                            FuelTankCapacity = 80,
                            FuelType = "Diesel",
                            GroundClearance = 174,
                            ImageUrl = "transit.png",
                            LuggageCapacity = 12,
                            Model = "Transit",
                            RentalPrice = 4800m,
                            Seaters = 15,
                            Status = "Available",
                            TireSize = "235/65 R16, All-Season",
                            Transmission = "6-Speed Manual"
                        },
                        new
                        {
                            CarId = 9,
                            Airbags = "Driver, Passenger, Side",
                            BrakingSystem = "ABS, EBD, Brake Assist",
                            Brand = "Mercedes-Benz",
                            FuelEfficiency = "8 km/L (combined)",
                            FuelTankCapacity = 75,
                            FuelType = "Diesel",
                            GroundClearance = 180,
                            ImageUrl = "sprinter.png",
                            LuggageCapacity = 12,
                            Model = "Sprinter",
                            RentalPrice = 5000m,
                            Seaters = 12,
                            Status = "Available",
                            TireSize = "225/75 R16, All-Season",
                            Transmission = "Automatic"
                        },
                        new
                        {
                            CarId = 11,
                            Airbags = "Driver, Passenger, Side",
                            BrakingSystem = "ABS, EBD, Brake Assist",
                            Brand = "Subaru",
                            FuelEfficiency = "10 km/L (city), 14 km/L (highway)",
                            FuelTankCapacity = 63,
                            FuelType = "Gasoline",
                            GroundClearance = 220,
                            ImageUrl = "xv.png",
                            LuggageCapacity = 4,
                            Model = "XV",
                            RentalPrice = 3200m,
                            Seaters = 5,
                            Status = "Available",
                            TireSize = "225/55 R18, All-Terrain",
                            Transmission = "CVT (AWD)"
                        },
                        new
                        {
                            CarId = 12,
                            Airbags = "Driver, Passenger, Side",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Toyota",
                            FuelEfficiency = "14 km/L (combined)",
                            FuelTankCapacity = 43,
                            FuelType = "Gasoline",
                            GroundClearance = 190,
                            ImageUrl = "avanza.png",
                            LuggageCapacity = 4,
                            Model = "Avanza",
                            RentalPrice = 3500m,
                            Seaters = 7,
                            Status = "Available",
                            TireSize = "185/65 R15, All-Season",
                            Transmission = "CVT"
                        },
                        new
                        {
                            CarId = 13,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Mitsubishi",
                            FuelEfficiency = "12 km/L (combined)",
                            FuelTankCapacity = 45,
                            FuelType = "Gasoline",
                            GroundClearance = 205,
                            ImageUrl = "xpander.png",
                            LuggageCapacity = 4,
                            Model = "Xpander",
                            RentalPrice = 3800m,
                            Seaters = 7,
                            Status = "Available",
                            TireSize = "205/55 R16, All-Season",
                            Transmission = "Automatic"
                        },
                        new
                        {
                            CarId = 14,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Suzuki",
                            FuelEfficiency = "13 km/L (city), 17 km/L (highway)",
                            FuelTankCapacity = 45,
                            FuelType = "Gasoline",
                            GroundClearance = 180,
                            ImageUrl = "ertiga.png",
                            LuggageCapacity = 4,
                            Model = "Ertiga",
                            RentalPrice = 3200m,
                            Seaters = 7,
                            Status = "Available",
                            TireSize = "185/65 R15, All-Season",
                            Transmission = "4-Speed Automatic"
                        },
                        new
                        {
                            CarId = 15,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Nissan",
                            FuelEfficiency = "13 km/L (combined)",
                            FuelTankCapacity = 45,
                            FuelType = "Gasoline",
                            GroundClearance = 200,
                            ImageUrl = "livina.png",
                            LuggageCapacity = 4,
                            Model = "Livina",
                            RentalPrice = 3500m,
                            Seaters = 7,
                            Status = "Available",
                            TireSize = "205/55 R16, All-Season",
                            Transmission = "CVT"
                        },
                        new
                        {
                            CarId = 16,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Toyota",
                            FuelEfficiency = "10 km/L (combined)",
                            FuelTankCapacity = 70,
                            FuelType = "Diesel",
                            GroundClearance = 185,
                            ImageUrl = "hiace.png",
                            LuggageCapacity = 10,
                            Model = "Hiace",
                            RentalPrice = 4500m,
                            Seaters = 15,
                            Status = "Available",
                            TireSize = "215/75 R16, All-Season",
                            Transmission = "Manual"
                        },
                        new
                        {
                            CarId = 17,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Nissan",
                            FuelEfficiency = "9 km/L (combined)",
                            FuelTankCapacity = 65,
                            FuelType = "Diesel",
                            GroundClearance = 190,
                            ImageUrl = "urvan.png",
                            LuggageCapacity = 10,
                            Model = "Urvan",
                            RentalPrice = 4400m,
                            Seaters = 15,
                            Status = "Available",
                            TireSize = "195/80 R15, All-Season",
                            Transmission = "Manual"
                        },
                        new
                        {
                            CarId = 18,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Hyundai",
                            FuelEfficiency = "9 km/L (city), 13 km/L (highway)",
                            FuelTankCapacity = 75,
                            FuelType = "Diesel",
                            GroundClearance = 190,
                            ImageUrl = "starex.png",
                            LuggageCapacity = 10,
                            Model = "Starex",
                            RentalPrice = 4600m,
                            Seaters = 12,
                            Status = "Available",
                            TireSize = "215/70 R16, All-Season",
                            Transmission = "5-Speed Automatic"
                        },
                        new
                        {
                            CarId = 19,
                            Airbags = "Driver, Passenger",
                            BrakingSystem = "ABS, EBD",
                            Brand = "Ford",
                            FuelEfficiency = "8 km/L (city), 12 km/L (highway)",
                            FuelTankCapacity = 80,
                            FuelType = "Diesel",
                            GroundClearance = 174,
                            ImageUrl = "transit.png",
                            LuggageCapacity = 12,
                            Model = "Transit",
                            RentalPrice = 4800m,
                            Seaters = 15,
                            Status = "Available",
                            TireSize = "235/65 R16, All-Season",
                            Transmission = "6-Speed Manual"
                        },
                        new
                        {
                            CarId = 20,
                            Airbags = "Driver, Passenger, Side",
                            BrakingSystem = "ABS, EBD, Brake Assist",
                            Brand = "Mercedes-Benz",
                            FuelEfficiency = "8 km/L (combined)",
                            FuelTankCapacity = 75,
                            FuelType = "Diesel",
                            GroundClearance = 180,
                            ImageUrl = "sprinter.png",
                            LuggageCapacity = 12,
                            Model = "Sprinter",
                            RentalPrice = 5000m,
                            Seaters = 12,
                            Status = "Available",
                            TireSize = "225/75 R16, All-Season",
                            Transmission = "Automatic"
                        });
                });

            modelBuilder.Entity("CarRental.Models.Entites.CustomerInquiry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomerInquiries");
                });

            modelBuilder.Entity("CarRental.Models.Entites.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("CarRental.Models.Entites.RentalRequest", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EstimatedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LicenseNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("CarId");

                    b.HasIndex("UserId");

                    b.ToTable("RentalRequests");
                });

            modelBuilder.Entity("CarRental.Models.Entites.Rentals", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentalId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RentalId");

                    b.HasIndex("CarId");

                    b.HasIndex("RenterId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("CarRental.Models.Entites.Renters", b =>
                {
                    b.Property<int>("RenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RenterId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("RenterId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Renters");
                });

            modelBuilder.Entity("CarRental.Models.Entites.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CodeExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("UserAccounts");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "dmcarss23@email.com",
                            FirstName = "Dm",
                            LastName = "Cars",
                            Password = "f340878ce392d887ad22e736f48a0ee0af77a34b0b7d76070e3633376c13406d",
                            Role = "Admin",
                            Username = "dmcars"
                        });
                });

            modelBuilder.Entity("CarRental.Models.Entites.RentalRequest", b =>
                {
                    b.HasOne("CarRental.Models.Entites.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Models.Entites.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("CarRental.Models.Entites.Rentals", b =>
                {
                    b.HasOne("CarRental.Models.Entites.Car", "Cars")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarRental.Models.Entites.Renters", "Renters")
                        .WithMany()
                        .HasForeignKey("RenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cars");

                    b.Navigation("Renters");
                });

            modelBuilder.Entity("CarRental.Models.Entites.Renters", b =>
                {
                    b.HasOne("CarRental.Models.Entites.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });
#pragma warning restore 612, 618
        }
    }
}
